use rand::{thread_rng, Rng};

pub struct Attempts {
    pub data: [[Vec<u8>; 9]; 9],
}

impl Attempts {
    pub fn new() -> Attempts {
        Attempts {
            data: [
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
                [
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                    vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
                ],
            ],
        }
    }

    pub fn get(&self, column: usize, row: usize) -> (u8, usize) {
        if self.data[column][row].len() == 0 {
            return (0, 0);
        }
        let mut rng = thread_rng();
        let index = rng.gen_range(0..self.data[column][row].len()) as usize;
        (self.data[column][row][index], index)
    }

    pub fn remove(&mut self, column: usize, row: usize, index: usize) {
        self.data[column][row].remove(index);
    }

    pub fn reset(&mut self, column: usize, row: usize) {
        self.data[column][row] = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];
    }

    pub fn len(&self, column: usize, row: usize) -> usize {
        self.data[column][row].len()
    }
}
